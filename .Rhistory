print("Hello World")
randu
randu(1)
randu
?randu
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
runif(10)
runif(1)
runif(1)*10
runif(1)
set.seed(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
runif(1)
set.seed(2)
runif(1)
set.seed(time)
time
time()
cbind(runif(10),runif(10))
seed(1)
set.seed(1)
cbind(runif(10),runif(10))
cbind(runif(10),runif(10))
cbind(runif(10),runif(10))
cbind(runif(10),runif(10))
set.seed(1)
cbind(runif(10),runif(10))
set.seed(1)
cbind(runif(10),runif(10))
library(codetools)
jg.countAlignedMReads<- function(jg.bamFiles){
jg.counts<-numeric()
for (jg.bam in jg.bamFiles){
jg.counts<-append(jg.counts,colSums(idxstatsBam(jg.bam)["mapped"])/1E6)
}
return(jg.counts)
}
jg.getControlCounts <- function(jg.control,jg.Condition)
{
jg.controlCounts<-jg.control[,-c(1:3)]
temp <- read.csv(file=jg.controlSampleSheet, header=TRUE, sep=",")['Condition']==jg.Condition
return(jg.controlCounts[,temp])
}
jg.plotNormalization<-function(jg.controlCountsTreated,jg.controlCountsUntreated)
{
plot(rowMeans(jg.controlCountsTreated),rowMeans(jg.controlCountsUntreated), pch=20,
xlab="Counts in peak after treatment" ,  ylab="Counts in peak before treatment" ,
main="Comparision of Counts in peaks for Drosophila")
abline(0,1,col="grey")
lm1<-lm(rowMeans(jg.controlCountsUntreated) ~ 0 + rowMeans(jg.controlCountsTreated))
abline(c(0,lm1$coef),col="red3")
print(lm1$coefficients)
angularcoeff<-lm1$coef[1]
points(rowMeans(jg.controlCountsTreated)*angularcoeff,rowMeans(jg.controlCountsUntreated),pch=20, col="royalblue3" )
treatment_fit<-rowMeans(jg.controlCountsTreated)*angularcoeff
lm1<-lm(treatment_fit ~ 0 + rowMeans(jg.controlCountsUntreated))
abline(c(0,lm1$coef),col="purple")
legend("topleft",legend=c("Raw", "Normalised"),pch=20,col=c("black","royalblue3"))
}
jg.MAplot<-function(jg.variablePeakset,jg.controlPeakset,jg.untreatedNames,jg.treatedNames,jg.coefficient)
{
M_corrected<-apply(jg.variablePeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
fc<-mean(treated)/mean(untreated)
log2fc<-log2(fc)
return(log2fc)
})
A_corrected<-apply(jg.variablePeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
return(log10(sum(treated+untreated)))
})
M_dm_corrected<-apply(jg.controlPeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
fc<-mean(treated)/mean(untreated)
log2fc<-log2(fc)
return(log2fc)
})
A_dm_corrected<-apply(jg.controlPeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
return(log10(sum(treated+untreated)))
})
plot(A_corrected,M_corrected,pch=20,xlab="A, log10(counts)",ylab="M, log2FC(treatment)", main="Normalised aligned reads")
points(A_dm_corrected,M_dm_corrected,pch=20,col="cornflowerblue")
lm1<-lm(M_dm_corrected~A_dm_corrected)
abline(lm1$coef,col="red4")
abline(h=0)
}
jg.getNormalizationCoefficient<-function(jg.controlCountsTreated,jg.controlCountsUntreated)
{
lm1<-lm(rowMeans(jg.controlCountsUntreated) ~ 0 + rowMeans(jg.controlCountsTreated))
return(lm1$coef[1])
}
checkUsage(jg.MAplot)
checkUsage(jg.getNormalizationCoefficient)
checkUsage(jg.countAlignedMReads)
checkUsage(jg.getControlCounts)
checkUsage(jg.plotNormalization)
checkUsage(jg.getNormalizationCoefficient)
checkUsage(jg.MAplot)
checkUsage(jg.countAlignedMReads)
checkUsage(jg.getControlCounts)
checkUsage(jg.plotNormalization)
checkUsage(jg.getNormalizationCoefficient)
checkUsage(jg.MAplot)
jg.countAlignedMReads<- function(jg.bamFiles){
jg.counts<-numeric()
for (jg.bam in jg.bamFiles){
jg.counts<-append(jg.counts,colSums(idxstatsBam(jg.bam)["mapped"])/1E6)
}
return(jg.counts)
}
jg.getControlCounts <- function(jg.control,jg.controlSampleSheet,jg.Condition)
{
jg.controlCounts<-jg.control[,-c(1:3)]
temp <- read.csv(file=jg.controlSampleSheet, header=TRUE, sep=",")['Condition']==jg.Condition
return(jg.controlCounts[,temp])
}
jg.plotNormalization<-function(jg.controlCountsTreated,jg.controlCountsUntreated)
{
plot(rowMeans(jg.controlCountsTreated),rowMeans(jg.controlCountsUntreated), pch=20,
xlab="Counts in peak after treatment" ,  ylab="Counts in peak before treatment" ,
main="Comparision of Counts in peaks for Drosophila")
abline(0,1,col="grey")
lm1<-lm(rowMeans(jg.controlCountsUntreated) ~ 0 + rowMeans(jg.controlCountsTreated))
abline(c(0,lm1$coef),col="red3")
print(lm1$coefficients)
angularcoeff<-lm1$coef[1]
points(rowMeans(jg.controlCountsTreated)*angularcoeff,rowMeans(jg.controlCountsUntreated),pch=20, col="royalblue3" )
treatment_fit<-rowMeans(jg.controlCountsTreated)*angularcoeff
lm1<-lm(treatment_fit ~ 0 + rowMeans(jg.controlCountsUntreated))
abline(c(0,lm1$coef),col="purple")
legend("topleft",legend=c("Raw", "Normalised"),pch=20,col=c("black","royalblue3"))
}
jg.getNormalizationCoefficient<-function(jg.controlCountsTreated,jg.controlCountsUntreated)
{
lm1<-lm(rowMeans(jg.controlCountsUntreated) ~ 0 + rowMeans(jg.controlCountsTreated))
return(lm1$coef[1])
}
jg.MAplot<-function(jg.variablePeakset,jg.controlPeakset,jg.untreatedNames,jg.treatedNames,jg.coefficient)
{
M_corrected<-apply(jg.variablePeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
fc<-mean(treated)/mean(untreated)
log2fc<-log2(fc)
return(log2fc)
})
A_corrected<-apply(jg.variablePeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
return(log10(sum(treated+untreated)))
})
M_dm_corrected<-apply(jg.controlPeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
fc<-mean(treated)/mean(untreated)
log2fc<-log2(fc)
return(log2fc)
})
A_dm_corrected<-apply(jg.controlPeakset[-c(1:3)],1,function(x){
untreated<-mean(x[jg.untreatedNames])
treated<-jg.coefficient*mean(x[jg.treatedNames])
return(log10(sum(treated+untreated)))
})
plot(A_corrected,M_corrected,pch=20,xlab="A, log10(counts)",ylab="M, log2FC(treatment)", main="Normalised aligned reads")
points(A_dm_corrected,M_dm_corrected,pch=20,col="cornflowerblue")
lm1<-lm(M_dm_corrected~A_dm_corrected)
abline(lm1$coef,col="red4")
abline(h=0)
}
checkUsage(jg.countAlignedMReads)
checkUsage(jg.getControlCounts)
checkUsage(jg.plotNormalization)
checkUsage(jg.getNormalizationCoefficient)
checkUsage(jg.MAplot)
dbaSummits <- 200
library(DiffBind)
library(Rsamtools)
checkUsage(jg.countAlignedMReads)
checkUsage(jg.getControlCounts)
checkUsage(jg.plotNormalization)
jg.getDba<-function (jg.variableSampleSheet,dbaSummits)
{
dba <- dba(sampleSheet = jg.variableSampleSheet)
dba <- dba.count(dba, summits=dbaSummits)
dba <- dba.count(dba, peaks=NULL, score=DBA_SCORE_READS)
return(dba)
}
dba <- jg.getDba(jg.variableSampleSheet,dbaSummits)
jg.variableSampleSheet <-"samplesheet/samplesheet_SLX8047_hs.csv"
dbaSummits <- 200
dba <- jg.getDba(jg.variableSampleSheet,dbaSummits)
setwd("/Volumes/FlyPeaks/FlyPeaks")
dba <- jg.getDba(jg.variableSampleSheet,dbaSummits)
checkUsage(jg.getDba)
asd
